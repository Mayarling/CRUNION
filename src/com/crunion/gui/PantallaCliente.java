package com.crunion.gui;

import com.crunion.dominio.Cliente;
import com.crunion.logica.ServicioCliente;
import javax.swing.JOptionPane;

/**
 * Clase para agregar un nuevo cliente.
 * @author Mayarling Martinez.
 */
public class PantallaCliente extends javax.swing.JFrame {
    
    private ServicioCliente servicioCliente;

    /**
     * Constructor por parametro.
     */
    public PantallaCliente(ServicioCliente servicioCliente) {
        initComponents();
        this.servicioCliente = servicioCliente;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        etiquetaTitulo = new javax.swing.JLabel();
        etiquetaId = new javax.swing.JLabel();
        etiquetaNombre = new javax.swing.JLabel();
        etiquetaApellidos = new javax.swing.JLabel();
        etiquetaNacionalidad = new javax.swing.JLabel();
        etiquetaEdad = new javax.swing.JLabel();
        campoId = new javax.swing.JTextField();
        campoNombre = new javax.swing.JTextField();
        campoApellidos = new javax.swing.JTextField();
        campoNacionalidad = new javax.swing.JTextField();
        campoEdad = new javax.swing.JTextField();
        botonGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agregar cliente");
        setResizable(false);

        etiquetaTitulo.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        etiquetaTitulo.setText("Agregar nuevo cliente");

        etiquetaId.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        etiquetaId.setText("ID cliente:");

        etiquetaNombre.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        etiquetaNombre.setText("Nombre:");

        etiquetaApellidos.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        etiquetaApellidos.setText("Apellidos:");

        etiquetaNacionalidad.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        etiquetaNacionalidad.setText("Nacionalidad:");

        etiquetaEdad.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        etiquetaEdad.setText("Edad:");

        campoId.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        campoId.setToolTipText("Digite su ID, solo debe ser números.");

        campoNombre.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        campoNombre.setToolTipText("Dígite su nombre.");

        campoApellidos.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        campoApellidos.setToolTipText("Dígite sus apellidos.");

        campoNacionalidad.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        campoNacionalidad.setToolTipText("Dígite su nacionalidad.");

        campoEdad.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        campoEdad.setToolTipText("Dígite su edad. Debe ser sollo números.");

        botonGuardar.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        botonGuardar.setText("Guardar");
        botonGuardar.setToolTipText("Click para guardar los datos.");
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etiquetaNombre)
                    .addComponent(etiquetaId)
                    .addComponent(etiquetaEdad))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(campoEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(campoId))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(etiquetaApellidos)
                                .addGap(27, 27, 27))
                            .addComponent(etiquetaNacionalidad, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(campoNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(botonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(etiquetaTitulo)
                .addGap(182, 182, 182))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(etiquetaId))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(etiquetaTitulo)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campoId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(etiquetaNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(campoNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaNombre)
                    .addComponent(campoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(etiquetaApellidos)
                    .addComponent(campoApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(etiquetaEdad)
                            .addComponent(campoEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(botonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        // Bandera para saber si los datos son validos, se asume por defecto que es true
        // y si se encuentra 1 dato invalido se actualiza el valor a false
        boolean datosValidos = true;
        int idCliente = 0;
        int edadCliente = 0;

        String textoIdCliente = this.campoId.getText();
        if(textoIdCliente == null || textoIdCliente.trim().equals("")){
            JOptionPane.showMessageDialog(this, "El ID del cliente es requerido.", "Error", JOptionPane.ERROR_MESSAGE);
            datosValidos = false;
        } else {
            //Verificar que el ID digitado sea numerico.
            try {
                idCliente = Integer.parseInt(textoIdCliente);
                if(idCliente <= 0 || idCliente > 999999999) {
                    JOptionPane.showMessageDialog(this, "El ID del cliente debe ser mayor a cero y menor que 999999999.", "Error", JOptionPane.ERROR_MESSAGE);
                    datosValidos = false;
                } else {
                    //Verificar que el ID digitado corresponda con un ID valido.
                    if(this.servicioCliente.existeCliente(idCliente)){
                        JOptionPane.showMessageDialog(this, "El ID digitado ya esta registrado.", "Error", JOptionPane.ERROR_MESSAGE);
                        datosValidos = false;
                    }
                }
            } catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "El ID del cliente debe ser un número.", "Error", JOptionPane.ERROR_MESSAGE);
                datosValidos = false;
            }
        }
        
        //verificamos que el usuario si digito el nombre.
        String textoNombreCliente = this.campoNombre.getText();
        if(textoNombreCliente == null || textoNombreCliente.trim().equals("")){
            JOptionPane.showMessageDialog(this, "El nombre del cliente es requerido.", "Error", JOptionPane.ERROR_MESSAGE);
            datosValidos = false;
        } else if(textoNombreCliente.length() > 30) {
            JOptionPane.showMessageDialog(this, "El nombre del cliente no puede ser mayor a 30 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
            datosValidos = false;
        }

        // verificamos que el usuario si dígito sus apellidos.
        String textoApellidosCliente = this.campoApellidos.getText();
        if(textoApellidosCliente == null || textoApellidosCliente.trim().equals("")){
            JOptionPane.showMessageDialog(this, "Los apellidos del cliente son requerido.", "Error", JOptionPane.ERROR_MESSAGE);
            datosValidos = false;
        } else if(textoApellidosCliente.length() > 50) {
            JOptionPane.showMessageDialog(this, "Los apellidos del cliente no pueden ser mayor a 50 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
            datosValidos = false;
        }

        // Verificamos que el usuario haya digitado la nacionalidad.
        String textoNacionalidad = this.campoNacionalidad.getText();
        if(textoNacionalidad == null || textoNacionalidad.trim().equals("")){
            JOptionPane.showMessageDialog(this, "Debe digitar su nacionalidad.", "Error", JOptionPane.ERROR_MESSAGE);
            datosValidos = false;
        } else if(textoNacionalidad.length() > 25) {
            JOptionPane.showMessageDialog(this, "La nacionalidad no puede ser mayor a 25 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
            datosValidos = false;
        }

        // Vereficamos la edad del cliente.
        String textoEdadCliente = this.campoEdad.getText();
        if(textoEdadCliente == null || textoEdadCliente.trim().equals("")){
            JOptionPane.showMessageDialog(this, "La edad del cliente es requerida.", "Error", JOptionPane.ERROR_MESSAGE);
            datosValidos = false;
        } else {
            //Verificar que la edad sea numerico.
            try {
                edadCliente = Integer.parseInt(textoEdadCliente);
                if(edadCliente < 18 || edadCliente > 120) {
                    JOptionPane.showMessageDialog(this, "La edad del cliente debe ser mayor a 18 y menor que 120.", "Error", JOptionPane.ERROR_MESSAGE);
                    datosValidos = false;
                } 
            } catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "La edad del cliente debe ser un número.", "Error", JOptionPane.ERROR_MESSAGE);
                datosValidos = false;
            }
        }
        
        if(datosValidos){
            Cliente nuevoCliente = new Cliente(idCliente, textoNombreCliente, textoApellidosCliente, textoNacionalidad, edadCliente);
            try {
                this.servicioCliente.agregarCliente(nuevoCliente);
                this.dispose();
            } catch(Exception exception){
                exception.printStackTrace();
                JOptionPane.showMessageDialog(this, exception.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonGuardarActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonGuardar;
    private javax.swing.JTextField campoApellidos;
    private javax.swing.JTextField campoEdad;
    private javax.swing.JTextField campoId;
    private javax.swing.JTextField campoNacionalidad;
    private javax.swing.JTextField campoNombre;
    private javax.swing.JLabel etiquetaApellidos;
    private javax.swing.JLabel etiquetaEdad;
    private javax.swing.JLabel etiquetaId;
    private javax.swing.JLabel etiquetaNacionalidad;
    private javax.swing.JLabel etiquetaNombre;
    private javax.swing.JLabel etiquetaTitulo;
    // End of variables declaration//GEN-END:variables
}
