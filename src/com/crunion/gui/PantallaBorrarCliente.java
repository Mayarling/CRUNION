package com.crunion.gui;

import com.crunion.dominio.Cliente;
import com.crunion.logica.ServicioCliente;
import com.crunion.logica.ServicioTransaccion;
import javax.swing.JOptionPane;

/**
 * Clase para borrar un cliente existente.
 * @author mayar
 */
public class PantallaBorrarCliente extends javax.swing.JFrame {
    
    private ServicioCliente servicioCliente;
    private ServicioTransaccion servicioTransaccion;

    /**
     * Constructor por parametros.
     * 
     * @param servicioCliente El objeto de servicios del cliente.
     * @param servicioTransaccion El objeto de servicios de transaccion.
     */
    public PantallaBorrarCliente(ServicioCliente servicioCliente, ServicioTransaccion servicioTransaccion) {
        initComponents();
        this.servicioCliente = servicioCliente;
        this.servicioTransaccion = servicioTransaccion;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        etiquetaTitulo = new javax.swing.JLabel();
        etiquetaId = new javax.swing.JLabel();
        campoId = new javax.swing.JTextField();
        botonBorrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Borrar cliente");
        setResizable(false);

        etiquetaTitulo.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        etiquetaTitulo.setText("Borrar cliente existente");

        etiquetaId.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        etiquetaId.setText("ID del cliente:");

        campoId.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        campoId.setToolTipText("Debe digitar el Id del cliente");

        botonBorrar.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        botonBorrar.setForeground(new java.awt.Color(255, 0, 0));
        botonBorrar.setText("Borrar");
        botonBorrar.setToolTipText("Click para buscar.");
        botonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(etiquetaId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(campoId, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(botonBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(etiquetaTitulo)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(etiquetaTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaId)
                    .addComponent(campoId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarActionPerformed
        // Bandera para saber si los datos son validos, se asume por defecto que es true
        // y si se encuentra 1 dato invalido se actualiza el valor a false
        boolean datosValidos = true;
        int idCliente = 0;
        
        String textoIdCliente = this.campoId.getText();
        if(textoIdCliente == null || textoIdCliente.trim().equals("")){
            JOptionPane.showMessageDialog(this, "El ID del cliente es requerido.", "Error", JOptionPane.ERROR_MESSAGE);
            datosValidos = false;
        } else {
            //Verificar que el ID digitado sea numerico.
            try {
                idCliente = Integer.parseInt(textoIdCliente);
                if(idCliente <= 0 || idCliente > 999999999) {
                    JOptionPane.showMessageDialog(this, "El ID del cliente debe ser mayor a cero y menor que 999999999.", "Error", JOptionPane.ERROR_MESSAGE);
                    datosValidos = false;
                } else if(!this.servicioCliente.existeCliente(idCliente)){
                    JOptionPane.showMessageDialog(this, "El ID del cliente no corresponde a ningún cliente registrado.", "Error", JOptionPane.ERROR_MESSAGE);
                    datosValidos = false;
                }
            } catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "El ID del cliente debe ser un número.", "Error", JOptionPane.ERROR_MESSAGE);
                datosValidos = false;
            }
        }
        if(datosValidos){
            Cliente clienteParaBorrar = this.servicioCliente.obtenerCliente(idCliente);
            if(this.servicioTransaccion.obtenerTransacciones(clienteParaBorrar).isEmpty()){
                int opcionElegida = JOptionPane.showConfirmDialog(this, "¿Esta seguro que desea borrar el cliente " + idCliente + "? Esta operación no puede revertirse.", "IMPORTANTE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if(opcionElegida == JOptionPane.YES_OPTION){
                    try {
                        this.servicioCliente.borrarCliente(idCliente);
                        JOptionPane.showMessageDialog(this, "El cliente " + idCliente + " ha sido borrado.", "IMPORTANTE", JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();
                    } catch(Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "El cliente " + idCliente+ " tiene conversiones registradas. No puede ser borrado.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonBorrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBorrar;
    private javax.swing.JTextField campoId;
    private javax.swing.JLabel etiquetaId;
    private javax.swing.JLabel etiquetaTitulo;
    // End of variables declaration//GEN-END:variables
}
