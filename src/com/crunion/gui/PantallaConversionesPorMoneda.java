package com.crunion.gui;

import com.crunion.dominio.Transaccion;
import com.crunion.logica.ServicioTransaccion;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Clase para el reporte de conversiones por moneda.
 * @author Mayarling Martínez.
 */
public class PantallaConversionesPorMoneda extends javax.swing.JFrame {
    private ServicioTransaccion servicioTransaccion;

    /**
     * Constructor por parametro.
     * @param servicioTransaccion El servicio transacción.
     */
    public PantallaConversionesPorMoneda(ServicioTransaccion servicioTransaccion) {
        initComponents();
        this.servicioTransaccion = servicioTransaccion;
        this.cargarDatosDeTransacciones();
    }
    
    /**
     * Este método se encarga de cargar todos los datos correspondientes a las transacciones realizadas por tipo de moneda.
     */
    private void cargarDatosDeTransacciones(){
        List<Transaccion> todasLasTransacciones = this.servicioTransaccion.obtenerTransacciones();
        Map<String, Transaccion> agrupacionDeTransacciones = this.obtenerAgrupaciones(todasLasTransacciones);
        String[] encabezadosDeLaTabla = {"Moneda de origen", "Monto", "Moneda de destino", "Monto"};
        Set<Map.Entry<String, Transaccion>> entradas = agrupacionDeTransacciones.entrySet();
        String[][] datos = new String[entradas.size()][4];
        int indice = 0;
        DecimalFormat formateador = new DecimalFormat("#,##0.00");
        for(Map.Entry<String, Transaccion> entrada : entradas){
            Transaccion transaccionAgrupada = entrada.getValue();
            datos[indice][0] = "(" + transaccionAgrupada.getCodigoMonedaOrigen() + ") " + transaccionAgrupada.getDescripcionMonedaOrigen();
            datos[indice][1] = formateador.format(transaccionAgrupada.getMontoOrigen());
            datos[indice][2] = "(" + transaccionAgrupada.getCodigoMonedaDestino()+ ") " + transaccionAgrupada.getDescripcionMonedaDestino();
            datos[indice][3] = formateador.format(transaccionAgrupada.getMontoDestino());
            indice ++;
        }
        if(entradas.isEmpty()){
            JOptionPane.showMessageDialog(this, "No hay conversiones registradas.", "Información", JOptionPane.INFORMATION_MESSAGE);
        }
        DefaultTableModel modeloDeDatos = new DefaultTableModel(datos, encabezadosDeLaTabla);
        this.tablaConversionesMoneda.setModel(modeloDeDatos);
    }
    
    /**
     * Método que devuelve un mapa con las agrupaciones de todas las transacciones de todos los clientes.
     * @param todasLasTransacciones Todas las transacciones de todos los clientes.
     * @return Un mapa que agrupa toda las tracciones por moneda origen y moneda destino.
     */
    private Map<String, Transaccion> obtenerAgrupaciones(List<Transaccion> todasLasTransacciones){
        Map<String, Transaccion> agrupacionDeTransacciones = new HashMap<>();
        for(Transaccion transaccion : todasLasTransacciones){
            String llave = transaccion.getCodigoMonedaOrigen() + "-" + transaccion.getCodigoMonedaDestino();
            if(agrupacionDeTransacciones.containsKey(llave)) {
                Transaccion transaccionAgrupada = agrupacionDeTransacciones.get(llave);
                transaccionAgrupada.setMontoOrigen(transaccionAgrupada.getMontoOrigen() + transaccion.getMontoOrigen());
                transaccionAgrupada.setMontoDestino(transaccionAgrupada.getMontoDestino() + transaccion.getMontoDestino());
            } else {
                try {
                    Transaccion transaccionAgrupada = new Transaccion(transaccion.toString());
                    agrupacionDeTransacciones.put(llave, transaccionAgrupada);
                } catch(Exception e){
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        return agrupacionDeTransacciones;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        etiquetaTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaConversionesMoneda = new javax.swing.JTable();
        botonCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Conversiones Por moneda");
        setResizable(false);

        etiquetaTitulo.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        etiquetaTitulo.setText("Reporte de conversiones por moneda");

        tablaConversionesMoneda.setEnabled(false);
        jScrollPane1.setViewportView(tablaConversionesMoneda);

        botonCerrar.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        botonCerrar.setText("Cerrar");
        botonCerrar.setToolTipText("Click para cerrar esta ventana.");
        botonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(etiquetaTitulo)
                                .addGap(109, 109, 109))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(botonCerrar)
                                .addGap(41, 41, 41))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(etiquetaTitulo)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonCerrar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_botonCerrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCerrar;
    private javax.swing.JLabel etiquetaTitulo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaConversionesMoneda;
    // End of variables declaration//GEN-END:variables
}
